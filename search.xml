<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mjau静态页面仿写基础总结]]></title>
    <url>%2Fnopapername.github.io%2F2019%2F02%2F26%2Fmjau%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E4%BB%BF%E5%86%99%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[前言一个很简单的网站，适合入门html+css的编写原网站：mjau-mjau.com仿写的网站项目文件：https://github.com/nopapername/Copy-write-mjau-mjau.com 技术栈html5+css3+jq基础+bootstrap4+owl carousel 页面效果预览 几个注意小点 页面全屏背景图随浏览器窗口大小变化，JS如下 12345678910$(window).resize(function () &#123; var height = $(window).height() $(&quot;.carousel-item img&quot;).css(&quot;height&quot;, height + &quot;px&quot;) $(&quot;.page-top&quot;).css(&quot;height&quot;, height + &quot;px&quot;)&#125;)$(document).ready(function () &#123; var beginHeight = $(window).height() $(&quot;.carousel-item img&quot;).css(&quot;height&quot;, beginHeight + &quot;px&quot;) $(&quot;.page-top&quot;).css(&quot;height&quot;, beginHeight + &quot;px&quot;) &#125; owl-carousel2轮播库的运用（通过查阅官方文档）HTML部分如下1234567891011121314&lt;!-- 引用官方库中的js和css文件（依赖jq） --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/node_modules/owl.carousel/dist/assets/owl.carousel.min.css&quot; /&gt;&lt;script src=&quot;/node_modules/jquery/dist/jquery.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/node_modules/owl.carousel/dist/owl.carousel.min.js&quot;&gt;&lt;/script&gt;&lt;!-- 轮播图div添加类owl-carousel owl-theme --&gt;&lt;div class=&quot;owl-carousel owl-theme&quot;&gt; &lt;div&gt; Your Content &lt;/div&gt; &lt;div&gt; Your Content &lt;/div&gt; &lt;div&gt; Your Content &lt;/div&gt; &lt;div&gt; Your Content &lt;/div&gt; &lt;div&gt; Your Content &lt;/div&gt; &lt;div&gt; Your Content &lt;/div&gt; &lt;div&gt; Your Content &lt;/div&gt;&lt;/div&gt; JS部分1234567891011121314151617181920// 如果页面运用多个轮播组件，则分开定义对象（如var owl1，var owl2）var owl1 = $(&apos;.mycarousel .owl-carousel&apos;); // 定义owl1组件对象 owl1.owlCarousel(&#123; // 配置相关属性（以下属性请查看官方文档） loop: true, margin: 10, autoplay: true, autoplayTimeout: 1500, autoplayHoverPause: true, responsive: &#123; 0: &#123; items: 1 &#125;, 600: &#123; items: 2 &#125;, 1000: &#123; items: 3 &#125; &#125; &#125;); 运用jquery的 fadeIn，fadeOut，fadeToggle不起作用原因：配置正确但是浏览器报错fadeIn is not a function，请更换jquery引用的版本（引用jq的某些精简版本的话可能不包括这些函数） 利用锚点a标签回到网页顶部HTML部分： 1234567&lt;!-- 网页顶部id：top --&gt;&lt;div class=&quot;page-top&quot; id=&quot;top&quot;&gt;.. &lt;!-- 中间内容 --&gt;.&lt;!-- 锚点a --&gt;&lt;a id=&quot;slidea&quot; class=&quot;up&quot; href=&quot;#top&quot; &gt;&lt;/a&gt; JS部分123456$(&quot;#slidea&quot;).click(function () &#123; $(&quot;html, body&quot;).animate(&#123; scrollTop: $($(this).attr(&quot;href&quot;)).offset().top - 20 + &quot;px&quot; &#125;, 500); return false;&#125;); 网页固定左右两侧的伸展导航条运用 flex 布局可实现右侧导航条向左伸展如图效果：仿写的网页缺点1.运用owlcarousel组件制作轮播图后未添加 分页点2.导航栏下拉菜单的小屏幕响应性有问题3.未添加logo的动画效果4.鼠标滑过图标的动画效果不优美 github：https://github.com/nopapername（正在写一个基于vue的简历网站，还未完善，入门VUE项目）]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>div+css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于vue技术栈制作自己的简历网站问题总结篇]]></title>
    <url>%2Fnopapername.github.io%2F2019%2F02%2F26%2F%E5%9F%BA%E4%BA%8Evue%E6%8A%80%E6%9C%AF%E6%A0%88%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AE%80%E5%8E%86%E7%BD%91%E7%AB%99%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%E7%AF%87%2F</url>
    <content type="text"><![CDATA[前言目前在学习vue技术栈的同时接触到了很多以前没用过的各种工具(如webpack，npm，git等等)，配合着vue全家桶里的一些东西做了一个基于vue的个人简历网站(虽然用vue框架搭简历网站优势不大，但是用来入门及练习vue基础相信也是极好的)。此篇博便总结一下近期遇到的各种问题及解决方案！ 先贴上Github的项目地址：(相信此项目作为初学者入门vue基础，了解vue-cli结构是非常适合的) https://github.com/nopapername/vue-resume 大家可以先预览一下页面，我挂在github pages上了，但是加载很慢–! https://nopapername.github.io/oyresume.github.io/ 欢迎大家fork及star此项目，有任何问题也可以提issues！ 项目概述及预览 技术栈前端 es6 vue2 webpack vue-cli vue-router vue-awesome-swiper vue-particles bootstrap csshake animate.css 预览总结前期项目准备最开始学习vue时是在菜鸟教程上看的，但是看了前几节很懵，完全不像html，css，原生js，jq容易理解。于是便去b站上找的教程花半个多月时间看完了（因为学vue得接触到webpack，npm，node等相关知识所以这些也粗略顺带学习了）不得不说我之前还去硬读了一遍vue2的官方文档才摸到门栏- -！。总结一下半天摸不到门栏的原因： 学习vue基础的时候只是简单用script标签引入的vue.js文件，没有模块化及组件化的概念，没有接触到甚至不了解诸如webpack，vue-cli，npm等相关工具。（了解这些基础概念推荐我看过的一篇博客：https://blog.csdn.net/wxl1555/article/details/79964818 ，读完这篇文章相信初学者就会有所认知，我这里就不赘述了）。 为什么做一个基于vue的项目要学习到上面所说的几种甚至更多的工具？这个问题在最开始真的困扰了我很久，除开推荐的那篇博文所说，我叙述一下我的感受。在做一个vue大型项目时，会用到vue全家桶里的东西得学习到，因为通过link或者script标签引入的东西太多，为简化这一过程便用到了npm包管理工具(方便你自己)，而页面加载时因为这些引入的东西太多请求的次数太多就会出现卡顿的情况，所以用到webpack打包工具来进行资源整合使页面只需要请求一次(方便用户)。而用到webpack和npm就得学习一丢丢的nodejs相关知识(因为webpack这个工具是用nodejs写的，而npm又得在node的环境下使用)，所以也得安装一下nodejs环境。然后在写项目的过程中，有时候可能因为失误或者什么其它原因导致项目出现问题想要回到项目以前的某个时候，便用到了git。所以学习的东西就相关联起来了。。。当然你也可以通过vue-cli脚手架快速开启一个项目（相当于直接帮你搭建好项目结构，但是理解这些东西应该会更让人印象深刻）。中期项目编写学习完了以上的相关东西，应该便具备开始真正写一个入门的vue项目的能力了。不过期间真的会遇到很多问题。我便着手做了一个基于vue技术栈的简历网站，用到了一些好的库文件及组件。总结一下这段时间以来的各种问题： 在vue-cli构建好的项目中引入外部文件和库的路径问题。引入文件路径如@/xxx/xxx中”@”符号是一种别名的写法，这里代表”src文件夹”路径。也可以采取相对路径的写法 ./xxx/xxx中的”./“表示当前路径，”../“的话表示上一级路径。 在组件中vue返回的data数据区如果返回的数据中引入的有图片的路径，应将图片放在和src路径同级的static文件夹下再./static/xxx/xxx引入。 如何添加页面初始化时的加载效果。将包含页面加载效果的div元素放在vue包裹的div元素下(vue项目中一般放在id为app的元素下第一个子元素的位置)，然后在app.vue中生命周期函数钩子的created函数中将页面加载效果的div元素删除。 引入的外部组件如何使用。如引入vue-awesome-swiper中的swiper及swiperSlide组件：在main.js中全局引入及注册import VueAwesomeSwiper from ‘vue-awesome-swiper’Vue.use(VueAwesomeSwiper)并在自己要使用的组件内部再引入相应的swiper组件import { swiper, swiperSlide } from ‘vue-awesome-swiper’最后就可以在html中使用。 一些组件传值相关的问题。在APP.vue中的数据通过子组件的props来调用。而子组件内部还引用了其他组件(暂且称为子子组件)，那么子子组件并不能通过props得到APP.vue组件中数据的值。 使用jquery插件中的方法的问题(比如使用bootstrap中的tooltip工具)。因为vue中不推荐使用jq，但是实际项目中可能有个中原因导致不得不使用jq来操作一些东西，所以我在用tooltip时就直接在script标签中使用$(document).ready(function () {$(‘#github’).tooltip()})方法可行，但是不知道有没有危害，希望大佬能提供其他解决办法！ 什么时候使用插值表达式。因为在vue项目中数据实现了双向绑定，因此在数据交互时显得尤为方便，但是又没明确表示什么时候使用如的插值表达式，应该除了一些不需要经常修改的内容直接写在html元素里，其他都可以用插值表达式。我一般在视图层用户能操作的表单数据中进行使用，当然因为是vue项目，能尽量用vue数据来绑定元素内容显示在页面上应该是最合适的，也便于我们后期维护修改。后期项目维护目前这个简历网站项目小屏幕端页面写了一部分还没完善，评论功能也没有添加进去，因此我决定等项目全部完工之后再来写这部分内容。目标实践是检验真理的唯一标准！因为是刚入门VUE写的项目，肯定有很多不完善甚至错误的东西。希望大家能提出意见。最终我的简历网站上线时得具备的功能： 响应式的手机端页面 具有登录评论留言功能 各个浏览器兼容性问题解决 维护修整页面内容 希望此篇博能对向我一样的初学者提供些许帮助！同时整个项目工程文件在本博文片头Github中(Readme文件中有下载及运行方式)，欢迎大家fork及star此项目，有任何问题也可以提issues！]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于vue练习demo：发表评论案例(使用localStorage存储数据)]]></title>
    <url>%2Fnopapername.github.io%2F2019%2F02%2F26%2F%E4%BD%BF%E7%94%A8localStorage%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[前言最近在学习 VUE的相关知识，之前学习html和css3和原生js及jq库时感觉还挺轻松，但是接触vue框架之后才发现需要了解的东西太多了(如 vue-router，vue-cli，webpack，npm等等都得接触到一些)，太庞杂了，因此因为这一个月以来看的东西太多了脑壳有点儿懵，想了想先巩固一下VUE的基础再往后面进行，所以练习写了这个 发表评论功能 的小玩意儿。（emmmmmmmm……以上废话可忽略） 实现功能 一个提交评论的表单区域（包括：评论人及评论内容，组件呈现） 评论列表显示的区域（vue实例展现） 使用localStorage存储数据使得刷新或关闭浏览器不影响评论数量效果展示 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://use.fontawesome.com/releases/v5.3.1/css/all.css&quot;&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 评论列表展示区域 --&gt; &lt;div id=&quot;app-listcomments&quot;&gt; &lt;publish @func=&quot;getlocalinfo&quot;&gt;&lt;/publish&gt; &lt;br&gt; &lt;div class=&quot;container&quot;&gt; &lt;ul class=&quot;list-group&quot;&gt; &lt;li class=&quot;list-group-item d-flex justify-content-between align-items-center&quot; v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt; &#123;&#123; item.content &#125;&#125; &lt;span class=&quot;badge badge-secondary badge-pill&quot;&gt;&#123;&#123; item.user &#125;&#125;&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 提交评论的表单组件 --&gt; &lt;template id=&quot;publish&quot;&gt; &lt;div&gt; &lt;div class=&quot;card border-info&quot;&gt; &lt;div class=&quot;card-header&quot;&gt;评论系统&lt;/div&gt; &lt;div class=&quot;card-body&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;form&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;user&quot;&gt; 评论人: &lt;/label&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;user&quot; v-model=&quot;user&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;content&quot;&gt; 评论内容: &lt;/label&gt; &lt;textarea id=&quot;content&quot; class=&quot;form-control&quot; v-model=&quot;content&quot;&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;input type=&quot;button&quot; value=&quot;发表评论&quot; class=&quot;btn btn-primary&quot; @click=&quot;getinfo&quot;&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; //组件创建（使用局部组件方式） var publish = &#123; data() &#123; return &#123; user: &apos;&apos;, content: &apos;&apos; &#125; &#125;, template: &quot;#publish&quot;, methods: &#123; getinfo() &#123;//获得输入框的user及content数据并更新到评论列表 if (this.user == &apos;&apos; || this.content == &apos;&apos;) &#123; //判断输入框是否为空 alert(&quot;输入框请不要留空白&quot;) &#125; else &#123; var info = &#123; id: Math.random(), user: this.user, content: this.content &#125; //获取用户输入的数据存到info对象中 var list = JSON.parse(localStorage.getItem(&apos;cmts&apos;) || &apos;[]&apos;) //获取localstrage中的数据，字符串类型需要转换为json对象 list.push(info)//将得到的info对象的添加到list localStorage.setItem(&apos;cmts&apos;, JSON.stringify(list))//将更新好的数据重新添加到localstrage this.user = this.content = &apos;&apos; //清空输入框 this.$emit(&apos;func&apos;)//更新页面的评论列表 &#125; &#125; &#125;, &#125; //vue实例部分创建 var listcomment = new Vue(&#123; el: &quot;#app-listcomments&quot;, data: &#123; list: [&#123; id: Math.random(), user: &quot;林宥嘉&quot;, content: &quot;多久了我都没变，爱你这回事整整六年&quot; &#125;, &#123; id: Math.random(), user: &quot;华晨宇&quot;, content: &quot;看着飞舞的尘埃掉下来&quot; &#125; ] &#125;, created() &#123; var localinfo = JSON.parse(localStorage.getItem(&apos;cmts&apos;) || &apos;[]&apos;) if (localinfo.length == 0) &#123; var list = this.list localStorage.setItem(&apos;cmts&apos;, JSON.stringify(list)) &#125; this.getlocalinfo() &#125;, components: &#123; &apos;publish&apos;: publish &#125;, methods: &#123; getlocalinfo() &#123; var list = JSON.parse(localStorage.getItem(&apos;cmts&apos;) || &apos;[]&apos;) this.list = list &#125; &#125; &#125;) &lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.slim.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.13.0/umd/popper.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 上例整体思路1.利用bootstrap4创建出基本的页面内容（包括 发表评论区域(vue组件)及下方的评论列表(vue实例)）2.创建vue实例3.vue实例中 先设置data区 中的list数组对象存储初始化的评论数据4.再添加局部组件publish5.vue实例中 再使用生命周期钩子函数created来将初始化的list数据存储到localstrage里6.vue实例中 然后在方法methods中写一个函数getlocalinfo()来获取localstrage中的数据并显示到列表中7.组件中使用v-model双向绑定数据得到 需要添加的user及content8.组件的方法methods中实现将获取到的user及content数据取出放到localstrage中并同步更新页面上的评论列表 ps：加油，进步！]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端基础 vue基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于浮动与display的不同]]></title>
    <url>%2Fnopapername.github.io%2F2019%2F02%2F26%2F%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E4%B8%8Edisplay%E7%9A%84%E4%B8%8D%E5%90%8C%2F</url>
    <content type="text"><![CDATA[问题CSS中用float:left和display:inline(display:inline-block)设置元素水平排列有什么不同？ 答案float:left会使元素脱离文档流（通俗讲就是 元素不占据原来的空间，后面的元素会当做它不存在一样占据他的位置。类似于绝对定位的效果）因此所有子元素设置浮动float后父级元素会被闭合（也就是父元素里没有内容不占据空间，宽高置为0，不过可以通过清除浮动解决）。float:left设置高度不一致的元素水平排列且需要换行排列时会排列的很奇怪。而使用display:inline或者display:inline-block则不会发生上面的问题。当然，float:left用在需要文字环绕时的效果时很有用。 总结：大多数时候==水平排列时用 display:inline(display:inline-block)文字环绕效果时用 浮动float==ps：不绝对，还是取决于自己，那个好用用哪个！！！ 题外：这里提一下display:inline和display:inline-block的区别？ display:inline通过将块级元素设置为内联元素来达到水平排列的目的display:inline-block则是在达到水平排列目的同时又设置为块级元素 PS：内联元素的盒子宽高靠内容撑开，不能设置元素的宽高等，块级元素则可以任意设置大小。 实践==原始：== 设置父级div宽为定值250px，设置5个子级div宽和高为定值颜色各不同。（绿，蓝，红，黄，黑）12345678910111213141516171819202122232425262728293031&lt;style&gt;.father &#123; width: 100px; background-color: pink;&#125;.greenson &#123; width: 15px; height: 15px; background-color: rgb(0, 255, 13);&#125;.blueson &#123; width: 30px; height: 30px; background-color: rgb(38, 0, 255);&#125;.redson &#123; width: 30px; height: 15px; background-color: rgb(255, 0, 43);&#125;.yellowson &#123; width: 30px; height: 45px; background-color: rgb(251, 255, 0);&#125;.blackson &#123; width: 45px; height: 30px; background-color: rgb(0, 0, 0);&#125;&lt;/style&gt; ==改变1：== 为所有子元素设置浮动float:left可以看到父元素的背景消失了，也就是上面所说的父元素没有内容不占据空间所以闭合了。因此在父元素里添加一个子元素div在最后清除浮动 12345678&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;greenson&quot;&gt;&lt;/div&gt; &lt;div class=&quot;blueson&quot;&gt;&lt;/div&gt; &lt;div class=&quot;redson&quot;&gt;&lt;/div&gt; &lt;div class=&quot;yellowson&quot;&gt;&lt;/div&gt; &lt;div class=&quot;blackson&quot;&gt;&lt;/div&gt; &lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt; //添加清除浮动 &lt;/div&gt; ==改变2：== 在使用浮动时减少父级div宽为100px当把父容器的宽度减小到第一行容纳不下这么多子元素时，剩余的子元素就会自动到下一行，但是却会排在第一行高度最高的元素之后。 ==改变3：== 改变所有的子元素为display:inline-block，父元素宽度恢复为250px（ps：为什么不设置为display:inline？ 因为子元素div里我只设置了宽和高和背景颜色，元素里没有内容，所以直接设置inline的话我设置的元素宽高就不起作用，而里面也没有内容就相当于一个空的div 。）可以看到也水平排列了（不过跟设置浮动的水平排列有所不同，是以底部对齐的排列！！！）==PS：设置inline或inline-block后元素间会有间距，原因是代码之间的空格让元素间出现了这样的情况！具体我之前的博客有讲过解决办法这里就不赘述了== ==改变4：== 在使用inline-block时减少父级div宽为100px可以看到依次顺序排列了。 ==改变5：== 为所有子元素同时添加inline-block和float呃，只有浮动的效果。（好吧只是好奇做个试验）应该是覆盖了display的效果，所以用完浮动记得最后要清除一下浮动哟~ 此篇博供自己日后复习所用 有错误记得指出哟~]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[json学习-嵌套对象中数组的遍历]]></title>
    <url>%2Fnopapername.github.io%2F2019%2F02%2F26%2Fjson%E5%AD%A6%E4%B9%A0-%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[定义json对象123456789var myObj=&#123; &quot;name&quot;:&quot;OY&quot;, &quot;num&quot;:16110126, &quot;sites&quot;:[ &#123;&quot;name&quot;:&quot;OY1&quot;,&quot;num&quot;:26,&quot;site&quot;:[&quot;some1&quot;,&quot;any1&quot;,&quot;thing1&quot;]&#125;, &#123;&quot;name&quot;:&quot;OY2&quot;,&quot;num&quot;:126,&quot;site&quot;:[&quot;some2&quot;,&quot;any2&quot;,&quot;thing2&quot;]&#125;, &#123;&quot;name&quot;:&quot;OY3&quot;,&quot;num&quot;:110126,&quot;site&quot;:[&quot;some3&quot;,&quot;any3&quot;,&quot;thing3&quot;]&#125; ]&#125; 遍历输出1234567891011121314function myfunc()&#123; var x=&quot;&quot;; for(var k in myObj)&#123; x+=&quot;&lt;h1 style=\&quot;color:red; \&quot;&gt;&quot;+myObj[k]+&quot;&lt;/h1&gt;&quot;; //最外层循环输出myObj的三个属性所对应的值 for(var i in myObj.sites)&#123; x+=&quot;&lt;h3 style=\&quot;color:blue; float:left\&quot;&gt;&quot;+myObj.sites[i].name+&quot;&lt;/3&gt;&quot;; //中间层循环输出嵌套对象sites的name属性的值 for(var j in myObj.sites[i].site)&#123; x+=&quot;&lt;p style=\&quot;color:green;\&quot;&gt;&quot;+myObj.sites[i].site[j]+&quot;&lt;/p&gt;&quot;;//最内层循环输出site数组的值 &#125; &#125; &#125; document.getElementById(&quot;demos&quot;).innerHTML=x; //输出内容｝ 输出效果 学习点==1.json数据的格式是：键值对（”键”:”值”），且用逗号，分隔2.json中的值 数字和null 不加引号3.json对象用大括号{} 可以存多个key/value（键/值）对，数组用[] 可以存多个值或多个对象4.json文件类型为.json后缀5.可以删除对象中的属性和修改对象中的值6.上例for循环中myObj[k]获得值value，而直接用k获得键key==一些笔记点 json 对象和 json 字符串的区别json对象 ：var str2 = { “name”: “asan”, “sex”: “man” }; json字符串：var str1 = ‘{ “name”: “deyuyi”, “sex”: “man” }’; 在使用for遍历时，只能通过 myObj[x] 来获取相应属性的值，而不能使用 myObj.x &lt;div id=&quot;demo&quot;&gt;&lt;/div&gt; &lt;script&gt; var myObj = { &quot;name&quot;:&quot;noname&quot;, &quot;num&quot;:126, &quot;site&quot;:&quot;www.csdn.com&quot; }; for (x in myObj) { document.getElementById(&quot;demo&quot;).innerHTML += myObj[x] + &quot;&lt;br&gt;&quot;; } &lt;/script&gt; json 在进行通过键名来获取值时，需要特别注意一下。把键名赋值给另外一个变量，然后通过.方式去获取值。这种方式是行不通的。 var myObj, x; myObj = { &quot;name&quot;:&quot;noname&quot;, &quot;num&quot;:126, &quot;site&quot;:null }; x = &quot;name&quot;; document.getElementById(&quot;demo&quot;).innerHTML = myObj.x; // 结果是 undefined 只能通过 [] 方式去访问: var myObj, x; myObj = { &quot;name&quot;:&quot;noname&quot;, &quot;num&quot;:126, &quot;site&quot;:null }; x = &quot;name&quot;; document.getElementById(&quot;demo&quot;).innerHTML = myObj[x]; // 结果是 noname json中的delete运算符并不是彻底删除元素，而是删除它的值，但仍会保留空间。delete 只是将该值置为undefined，而不会影响数组长度，即将其变为稀疏数组]]></content>
      <categories>
        <category>json</category>
      </categories>
      <tags>
        <tag>json基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学生管理表单验证练手（正则表达式方式）]]></title>
    <url>%2Fnopapername.github.io%2F2019%2F02%2F26%2F%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E7%BB%83%E6%89%8B%EF%BC%88%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%96%B9%E5%BC%8F%EF%BC%89%2F</url>
    <content type="text"><![CDATA[学习菜鸟的正则表达式时看到的，拿来练习做了些许修改话不多说，直接上图 代码: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://use.fontawesome.com/releases/v5.3.1/css/all.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; &lt;title&gt;test&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-12&quot;&gt; &lt;form action=&quot;&quot; name=&quot;myform&quot; onsubmit=&quot;myfunc()&quot;&gt; &lt;table class=&quot;table table-bordered&quot;&gt; &lt;thead&gt; &lt;tr class=&quot;text-center&quot;&gt; &lt;th colspan=2 class=&quot;text-success display-4&quot;&gt;学生管理表单&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p class=&quot;text-primary&quot;&gt;姓名:&lt;/p&gt; &lt;input type=&quot;text&quot; id=&quot;sname&quot;&gt; &lt;p&gt;(中文)&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;p class=&quot;text-primary&quot;&gt;学号:&lt;/p&gt; &lt;input type=&quot;text&quot; id=&quot;sno&quot;&gt; &lt;p&gt;(8位数字)&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;p class=&quot;text-primary&quot;&gt;邮箱:&lt;/p&gt; &lt;input type=&quot;text&quot; id=&quot;email&quot;&gt; &lt;/td&gt; &lt;td&gt; &lt;p class=&quot;text-primary&quot;&gt;电话:&lt;/p&gt; &lt;input type=&quot;text&quot; id=&quot;tel&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;text-center&quot;&gt; &lt;td colspan=&quot;2&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-danger&quot;&gt;提交&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; /*是否带有小数*/ function isDecimal(str) &#123; var objRegExp = /^\d+\.\d+$/; return objRegExp.test(str); &#125; /*校验是否中文名称组成 */ function ischina(str) &#123; var reg = /^[\u4E00-\u9FA5\uf900-\ufa2d·s]&#123;2,20&#125;$/; /*定义验证表达式*/ return reg.test(str); /*进行验证*/ &#125; /*校验是否全由8位数字组成 */ function isStudentNo(str) &#123; var reg = /^[0-9]&#123;8&#125;$/; /*定义验证表达式*/ return reg.test(str); /*进行验证*/ &#125; /*校验电话码格式 */ function isTelCode(str) &#123; var reg = /^1(?:3\d|4[4-9]|5[0-35-9]|6[67]|7[013-8]|8\d|9\d)\d&#123;8&#125;$/; return reg.test(str); &#125; /*校验邮件地址是否合法 */ function IsEmail(str) &#123; var reg = /^(([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]&#123;2,5&#125;)&#123;1,25&#125;)$/; return reg.test(str); &#125; function myfunc() &#123; if (!isStudentNo(document.getElementById(&quot;sno&quot;).value)) &#123; alert(&quot;学生编号是8位数字&quot;); document.getElementById(&quot;sno&quot;).focus(); return false; &#125; if (!ischina(document.getElementById(&quot;sname&quot;).value)) &#123; alert(&quot;学生姓名必须填写中文&quot;); document.getElementById(&quot;sname&quot;).focus(); return false; &#125; if (!IsEmail(document.getElementById(&quot;email&quot;).value)) &#123; alert(&quot;邮箱地址错误&quot;); document.getElementById(&quot;email&quot;).focus(); return false; &#125; if (!isTelCode(document.getElementById(&quot;tel&quot;).value)) &#123; alert(&quot;电话号码错误&quot;); document.getElementById(&quot;tel&quot;).focus(); return false; &#125; /*运行到这里说明验证通过返回true submit提交按钮起作用提交表单*/ alert(&quot;提交成功&quot;) return false; // 这边设置禁止提交，实际项目需要改为 true &#125; &lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.slim.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.13.0/umd/popper.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Html基础总结]]></title>
    <url>%2Fnopapername.github.io%2F2019%2F02%2F26%2FHtml%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[总结一些看到的，学到的一些大佬们更深入的html理解，方便日后所用ps：对初学者挺有用的总结 web标准web标准介绍： w3c：万维网联盟组织，用来制定web标准的机构（组织） web标准：制作网页要遵循的规范。 web标准规范的分类：结构标准、表现标准、行为标准。 ==结构==：html。==表现==：css。==行为==：JavaScript。 web标准总结： 结构标准：html就是用来制作网页的。 表现标准：css就是对网页进行美化的。 行为标准：js就是让网页动起来，具有生命力的。 Html 相关==html标签是分等级的，分为几种呢？==两种： 文本级标签：p、span、a、b、i、u、em。文本级标签里只能放文字、图片、表单元素。（a标签里不能放a和input） 容器级标签：div、h系列、li、dt、dd。容器级标签里可以放置任何东西。 （从学习p的第一天开始，就要死死记住：p标签是一个文本级标签，p里面只能放文字、图片、表单元素。其他的一律不能放。） ==为什么使用 &lt;!Doctype html&gt; ?==&lt;!doctype html&gt;说明是采用html5文档类型编写网页的标准声明,原先很长,现在是这个简洁形式,主流浏览器现在都认识这个声明。（这一行一般位于起始，是文档声明头，DocType Declaration，简称DTD。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。） 以下版本声明仅供了解（用的少了，目前主流浏览器都支持html5） HTML 4.01 Strict该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。&lt;!doctype HTML PUBLIC “-//W3C//DTD HTML 4.01//EN” “http://www.w3.org/TR/html4/strict.dtd&quot;&gt; HTML 4.01 Transitional该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。&lt;!doctype HTML PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN”“http://www.w3.org/TR/html4/loose.dtd&quot;&gt; HTML 4.01 Frameset该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。&lt;!doctype HTML PUBLIC “-//W3C//DTD HTML 4.01 Frameset//EN”“http://www.w3.org/TR/html4/frameset.dtd&quot;&gt; XHTML 1.0 Strict该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。必须以格式正确的 XML 来编写标记。&lt;!doctype html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”“http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; XHTML 1.0 Transitional该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。必须以格式正确的 XML 来编写标记。&lt;!doctype html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN” “http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt; XHTML 1.0 Frameset该 DTD 等同于 XHTML 1.0 Transitional，但允许框架集内容。&lt;!doctype html PUBLIC “-//W3C//DTD XHTML 1.0 Frameset//EN”“http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt; XHTML 1.1该 DTD 等同于 XHTML 1.0 Strict，但允许添加模型（例如提供对东亚语系的 ruby 支持）。&lt;!doctype html PUBLIC “-//W3C//DTD XHTML 1.1//EN” “http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&gt; ==为什么使用 &lt;meta charset=”UTF-8”&gt; ?==是为了用meta提供网页所使用的字符集编码信息（不理解请看下面） 要回答这个问题我们先了解一下计算机的编码： 计算机，不能直接存储文字，存储的是编码。 计算机只能处理二进制的数据，其它数据，比如：0-9、a-z、A-Z，这些字符，我们定义一套规则来表示。假如：A用110表示，B用111表示等。 ASCII码：美国发布的，用1个字节(8位二进制)来表示一个字符，共可以表示2^8=256个字符。美国的国家语言是英语，只要能表示0-9、a-z、A-Z、特殊符号。 ANSI编码：每个国家为了显示本国的语言，都对ASCII码进行了扩展。用2个字节(16位二进制)来表示一个汉字，共可以表示2^16＝65536个汉字。例如：中国的ANSI编码是GB2312编码(简体)，对6763汉字进行编码，含600多特殊字符。另外还有GBK(简体)。日本的ANSI编码是JIS编码。 台湾的ANSI编码是BIG5编码（繁体）。 GBK：对GB2312进行了扩展，用来显示罕见的、古汉语的汉字。现在已经收录了2.1万左右。并提供了1890个汉字码位。K的含义就是“扩展”。 Unicode编码(统一编码)：用4个字节(32位二进制)来表示一个字符，想法不错，但效率太低。例如，字母A用ASCII表示的话一个字节就够，可用Unicode编码的话，得用4个字节表示，造成了空间的极大浪费。A的Unicode编码是00000000 0000 0000 0000 0000 0100 0000 UTF-8(Unicode Transform Format)编码：根据字符的不同，选择其编码的长度。比如：一个字符A用1个字节表示，一个汉字用2个字节表示。 ==所以开发中，都用UTF-8编码，准没错。== 中文能够使用的字符集两种：第一种：UTF-8。UTF-8是国际通用字库，里面涵盖了所有地球上所有人类的语言文字，比如阿拉伯文、汉语、鸟语……第二种：GBK（对GB2312进行了扩展）。gb2312是国标，是中国的字库，里面仅涵盖了汉字和一些常用外文，比如日文片假名，和常见的符号。字库规模： UTF-8（字全） &gt; gb2312（只有汉字） 重点1：避免乱码我们用meta标签声明的当前这个html文档的字库，一定要和保存的文件编码类型一样，否则乱码！（重点）。当我们不设置的时候，sublime默认类型就是UTF-8。而一旦更改为gb2312的时候，就一定要记得设置一下sublime的保存类型：文件→ set File Encoding to → Chinese Simplified(GBK)。 重点2：UTF-8和gb2312的比较保存大小：UTF-8（更臃肿、加载更慢） &gt; gb2312 （更小巧，加载更快） ==总结：==UTF-8：字多，有各种国家的语言，但是保存尺寸大，文件臃肿； gb2312：字少，只用中文和少数外语和符号，但是尺寸小，文件小巧。==列出2个使用情形：==**1）你们公司是做日本动漫的，经常出现一些日语动漫的名字，网页要使用UTF-8。如果用gb2312将无法显示日语。 2）你们公司就是中文网页，极度的追求网页的显示速度，要使用gb2312。如果使用UTF-8将每个汉字多一个byte，所以5000个汉字，多5kb。一些大佬亲测：qq网、网易、搜狐都是使用gb2312。这些公司，都追求显示速度。 新华网藏语频道，使用的是UTF-8，保证字符集的数量。因为浏览器是通过meta来看网页是使用什么字符集的。比如你保存的时候，meta写的和声明的不匹配，那么浏览器就是乱码。 ==那么mate标签还有什么用处？==1.定义使用哪种字符集（上面已经说过了）2.定义“关键词”例子： &lt;meta name=”Keywords” content=”网易,邮箱,游戏,新闻,体育,娱乐,女性,亚运,论坛,短信” /&gt; 这些关键词，就是告诉搜索引擎，这个网页是干嘛的，能够提高搜索命中率。让别人能够找到你，搜索到你。 3.定义“页面描述”例子： &lt;meta name=”Description” content=”网易是中国领先的互联网技术公司，为用户提供免费邮箱、游戏、搜索引擎服务，开设新闻、娱乐、体育等30多个内容频道，及博客、视频、论坛等互动交流，网聚人的力量。” /&gt; name即“名字”，content即“内容”。只要设置Description页面描述，那么百度搜索结果，就能够显示这些语句，这个技术叫做SEO（search engine optimization，搜索引擎优化）。 效果如下： ==一些常用到的转义字符？==常用到的特殊字符有：空格（&amp;nbsp；）、小于（&amp;lt；）、大于（&amp;gt；）、版权（&amp;copy；）。 来一张表格，方便需要的时候查询： ==看到的一些面试题，很基础但很有意义：==h1标签有什么作用？正确答案：给文本增加主标题的语义。错误答案：给文字加粗、加黑、变大。 网页的head标签里面，表示的是页面的配置，有什么配置？答：字符集、关键词、页面描述、页面标题。（今后我们还能看见一些其他的配置：IE适配、视口、iPhone小图标等等） 以上内容借鉴至百度&amp;菜鸟教程&amp;gibhub： https://github.com/smyhvae ps：此篇博持续更新！有我觉得有用的东西就记录在此。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html中列表元素的一些应用]]></title>
    <url>%2Fnopapername.github.io%2F2019%2F02%2F26%2Fhtml%E4%B8%AD%E5%88%97%E8%A1%A8%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[html中列表元素的一些应用1.导航栏的制作导航栏基本每一个网站都会用到，那么我们就可以使用html中的列表元素ul来制作一个简单的导航栏。 123456&lt;ul class=&quot;topmenu&quot;&gt; &lt;li&gt;&lt;a href=&quot;#home&quot; class=&quot;active&quot;&gt;主页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#other&quot;&gt;新闻&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#other&quot;&gt;联系&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#other&quot;&gt;关于&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 再使用一些简单的CSS就可以转换成好看的导航栏而不是枯燥的HTML菜单。 123456789101112131415161718192021222324.topmenu &#123; list-style-type: none; margin: 1; padding: 0; overflow: hidden; background-color:#666; &#125; .topmenu li &#123; float:left; &#125; .topmenu li a &#123; display: inline-block; color: white; text-align: center; padding: 25px; text-decoration: none; &#125; .topmenu li a:hover &#123; background-color:darkorange; &#125; .topmenu li a.active &#123; color: white; background-color:darkcyan; &#125; 2.排行榜的制作也可以使用列表元素ol来制作排行榜的展示，例如某站：代码写起来应该不算困难，本菜等以后用到之后再去实践了。 3.文章板块化，格式化版面等具有相同文体特征的内容的制作比如一个网页有一列相同板块的内容等，如文章列表： 代码部分： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;section class=&quot;bottomsection&quot;&gt; &lt;div class=&quot;container aftercontain&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-12&quot;&gt; &lt;ul class=&quot;nav nav-tabs m-4&quot;&gt; &lt;li class=&quot;nav-item&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;nav-link text-light active&quot;&gt;最新博文&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;nav-link disabled&quot;&gt;其他想法&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;m-4 ul_notecontain&quot;&gt; &lt;li class=&quot;p-4&quot;&gt; &lt;h3 class=&quot;mb-4&quot;&gt;第一篇博客&lt;/h3&gt; &lt;i&gt; &lt;div class=&quot;fakeimg mr-3&quot; style=&quot;float: left&quot;&gt;图像&lt;/div&gt; 这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！ &lt;/i&gt; &lt;p style=&quot;margin-top:40px;&quot;&gt; &lt;span&gt;帮我消消黑眼圈&lt;/span&gt; &lt;span&gt;&lt;small&gt;-----------------2018-12-08-----------------&lt;/small&gt;&lt;/span&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-danger&quot; style=&quot;float: right&quot;&gt;阅读更多&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;div style=&quot;background:linear-gradient(to left,#2b0000,#530000,#2b0000);height:1px;&quot;&gt;&lt;/div&gt; &lt;li class=&quot;p-4&quot;&gt; &lt;h3 class=&quot;mb-4&quot;&gt;第二篇博客&lt;/h3&gt; &lt;i&gt; &lt;div class=&quot;fakeimg mr-3&quot; style=&quot;float: left&quot;&gt;图像&lt;/div&gt; 这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！ &lt;/i&gt; &lt;p style=&quot;margin-top:40px;&quot;&gt; &lt;span&gt;帮我消消黑眼圈&lt;/span&gt; &lt;span&gt;&lt;small&gt;-----------------2018-12-09-----------------&lt;/small&gt;&lt;/span&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-danger&quot; style=&quot;float: right&quot;&gt;阅读更多&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;div style=&quot;background:linear-gradient(to left,#2b0000,#530000,#2b0000);height:1px;&quot;&gt;&lt;/div&gt; &lt;li class=&quot;p-4&quot;&gt; &lt;h3 class=&quot;mb-4&quot;&gt;第三篇博客&lt;/h3&gt; &lt;i&gt; &lt;div class=&quot;fakeimg mr-3&quot; style=&quot;float: left&quot;&gt;图像&lt;/div&gt; 这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！这是一些博客内容！ &lt;/i&gt; &lt;p style=&quot;margin-top:40px;&quot;&gt; &lt;span&gt;帮我消消黑眼圈&lt;/span&gt; &lt;span&gt;&lt;small&gt;-----------------2018-12-10-----------------&lt;/small&gt;&lt;/span&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-danger&quot; style=&quot;float: right&quot;&gt;阅读更多&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/section&gt; 4.轮播图，全屏焦点图的制作代码部分html： 1234567891011121314151617181920212223242526272829303132333435363738 &lt;div id=&quot;wrap&quot;&gt; &lt;ul class=&quot;pic&quot;&gt; &lt;li style=&quot;background:purple&quot;&gt;1 &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li style=&quot;background:deeppink&quot;&gt;2 &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li style=&quot;background:blue&quot;&gt;3 &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li style=&quot;background:#00ae9d&quot;&gt;4 &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li style=&quot;background:yellow&quot;&gt;5 &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li style=&quot;background:skyblue&quot;&gt;6 &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li style=&quot;background:orange&quot;&gt;7 &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;tab&quot;&gt; &lt;li class=&quot;on&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p href=&quot;#&quot; class=&quot;prev&quot;&gt; &amp;lt;&lt;/p&gt; &lt;p href=&quot;#&quot; class=&quot;next&quot;&gt;&amp;gt;&lt;/p&gt;&lt;/div&gt; css： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100&lt;style&gt;* &#123; margin:0; padding:0;&#125;a &#123; text-decoration:none;&#125;li &#123; list-style:none;&#125;#wrap &#123; position:relative; width:700px; height:400px; margin:50px auto; overflow:hidden;&#125;#wrap .pic &#123; position:absolute; top:0; left:0; width:1000%; height:100%;&#125;.pic li &#123; float:left; width:700px; height:400px; color:#fff; font-size:80px; text-align:center; line-height:400px;&#125;.pic li img &#123; border:0; vertical-align:middle; /*width:700px; height:400px; */&#125;.tab &#123; position:absolute; bottom:20px; left:50%; margin-left:-100px; height:30px; padding-left:10px; background:rgba(0,0,0,.2); border-radius:15px; transition:0.5s;&#125;.tab:hover &#123; background:rgba(0,0,0,.5); transform:scale(1.2);&#125;.tab li &#123; width:20px; height:20px; float:left; background:#fff; border-radius:50%; margin:5px 10px 0 0; /*opacity:0.35; */ cursor:pointer;&#125;.tab li.on &#123; /*position:absolute; top:0; */ background:#f60; /*opacity:1; z-index:99; */&#125;p &#123; position:absolute; top:50%; margin-top:-30px; width:30px; background:rgba(0,0,0,0.2); text-align:center; font-size:28px; font-weight:bold; line-height:60px; color:#fff; cursor:pointer;&#125;p:hover &#123; background:rgba(0,0,0,0.5);&#125;.prev &#123; left:0;&#125;.next &#123; right:0;&#125;&lt;/style&gt; js： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657$(function() &#123; var $wrap = $(&apos;#wrap&apos;), $picUl = $(&apos;.pic&apos;), $tabLi = $(&apos;.tab li&apos;), $prev = $(&apos;.prev&apos;), $next = $(&apos;.next&apos;), widLi = $picUl.children().eq(0).width(), len = $tabLi.length, idx = 0, timer = null; //get first; set all $tabLi.click(function() &#123; $(this).addClass(&quot;on&quot;).siblings().removeClass(&quot;on&quot;) idx = $(this).index(); $picUl.animate(&#123; left: -idx * widLi &#125;, 500) &#125;) // 点击下一张 $next.click(function() &#123; idx++; idx %= len; // 序号为小圆按钮的长度时到达第一张 $tabLi.eq(idx).addClass(&quot;on&quot;).siblings().removeClass(&quot;on&quot;) $picUl.animate(&#123; left: -idx * widLi &#125;, 500) &#125;) $prev.click(function() &#123; idx--; if (idx &lt; 0) &#123; idx = len - 1 &#125;; $tabLi.eq(idx).addClass(&quot;on&quot;).siblings().removeClass(&quot;on&quot;) $picUl.animate(&#123; left: -idx * widLi &#125;, 500) &#125;) // 自动轮播 auto(); function auto() &#123; timer = setInterval(function() &#123; $next.trigger(&quot;click&quot;) // 触发click &#125;, 3000) &#125; $wrap.hover(function() &#123; clearInterval(timer); &#125;, function() &#123; auto(); &#125;)&#125;) 5.遇到再来补充还有什么欢迎各位大佬补充]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux下编程:创建父子进程来实现电子表功能(进程通信小测)]]></title>
    <url>%2Fnopapername.github.io%2F2019%2F02%2F26%2Flinux%E4%B8%8B%E7%BC%96%E7%A8%8B-%E5%88%9B%E5%BB%BA%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B%E6%9D%A5%E5%AE%9E%E7%8E%B0%E7%94%B5%E5%AD%90%E8%A1%A8%E5%8A%9F%E8%83%BD-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E5%B0%8F%E6%B5%8B%2F</url>
    <content type="text"><![CDATA[题目编写程序，实现电子表功能。（1）使用SIGALRM信号（2）创建父子进程，实现信号发送和响应。 程序1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;stdio.h&gt;#include &lt;signal.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;int hours = 0;int seconds = 0;int minutes = 0;void clock(int signal) &#123; //电子表 if (signal == SIGALRM) //处理SIGALRM信号 &#123; alarm(1); //设置每一秒发送一个信号 seconds++; if (seconds == 60) &#123; minutes++; seconds = 0; if (minutes == 60) &#123; hours++; minutes = 0; if (hours == 24) &#123; hours = 0; &#125; &#125; &#125; printf(&quot;\r计时:%02d:%02d:%02d&quot;, hours, minutes, seconds); fflush(stdout); //清空输出缓冲区，并把缓冲区内容输出 &#125;&#125;int main() &#123; pid_t pid; //定义一个pid_t类型的变量pid if((pid=fork())==-1)&#123; //fork()函数(创建子进程后)返回一个进程号给pid并判断 perror(&quot;fork error!&quot;); exit(EXIT_FAILURE); &#125; else if(pid&gt;0) //the father &#123; signal(SIGALRM,clock); //创建SIGALRM信号(收到信号时执行doing函数) pause(); //父进程挂起等待子进程信号到来 while(1); &#125; else if(pid==0) // the son &#123; sleep(5); //等待父进程创建信号完成 kill(getppid(),SIGALRM); //向父进程发送 SIGALRM 信号 exit(0); &#125; return 0;&#125;]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用inline设置水平导航栏有空白间距问题]]></title>
    <url>%2Fnopapername.github.io%2F2019%2F02%2F26%2F%E4%BD%BF%E7%94%A8inline%E8%AE%BE%E7%BD%AE%E6%B0%B4%E5%B9%B3%E5%AF%BC%E8%88%AA%E6%A0%8F%E6%9C%89%E7%A9%BA%E7%99%BD%E9%97%B4%E8%B7%9D%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题现象博主学习css练习写导航栏时遇到使用inline来制作水平导航栏时发现其之间会有一小部分间距，而使用浮动来做水平导航栏则没有此问题。间距如下：所以就去搜寻了一下，发现原因是：标签之间的空格或者换行因为遵从代码规范书写时会有各种换行或空格的形式，如：所以，最原始的办法就是换成一行：不过似乎有些不妥。所以我又搜寻了一些资料，里面总结的很全面： http://www.zhangxinxu.com/wordpress/?p=2357此链接by zhangxinxu from http://www.zhangxinxu.com 所以，我就用了 ==margin负值来取消间隔==。解决之后： 补充：还发现了一个很好的方法：对==父元素添加{font-size:0}==，即将字体大小设为0，那么那个空白符也变成0px，从而消除空隙。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端基础 css基础</tag>
      </tags>
  </entry>
</search>
